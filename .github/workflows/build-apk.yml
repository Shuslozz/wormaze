name: Build WORMAZE APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      APP_ID: com.wormaze.game
      APP_NAME: WORMAZE
      VERSION_NAME: 1.0
      VERSION_CODE: 1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Setup Android environment
      uses: android-actions/setup-android@v3
      with:
        sdk-version: 'commandlinetools-latest'
        ndk-version: '25.1.8937393'
        cmake-version: '3.22.1'
        licenses: |
          android-sdk-license-ed0d0a5b
          android-sdk-license-33b6a2b5
          
    - name: Prepare LÖVE Android template
      run: |
        # Clone with retry and clean slate
        rm -rf love-template
        git clone --depth 1 --branch main https://github.com/love2d/love-android.git love-template
        
        # Set up game directory
        mkdir -p love-template/app/src/main/assets/game
        cp main.lua love-template/app/src/main/assets/game/
        cp conf.lua love-template/app/src/main/assets/game/
        
    - name: Configure project
      run: |
        cd love-template
        
        # Create minimal build configuration
        cat > app/build.gradle << 'EOL'
        plugins {
            id 'com.android.application'
        }

        android {
            compileSdk 34
            namespace '$APP_ID'
            
            defaultConfig {
                applicationId '$APP_ID'
                minSdk 21
                targetSdk 34
                versionCode $VERSION_CODE
                versionName '$VERSION_NAME'
                externalNativeBuild {
                    cmake {
                        arguments "-DANDROID_STL=c++_shared"
                        cppFlags "-std=c++17"
                    }
                }
                ndk {
                    abiFilters 'armeabi-v7a', 'arm64-v8a'
                }
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            lintOptions {
                abortOnError false
                checkReleaseBuilds false
            }
            
            packagingOptions {
                jniLibs {
                    useLegacyPackaging true
                }
            }
        }

        dependencies {
            implementation fileTree(dir: 'libs', include: ['*.jar'])
        }
        EOL
        
        # Configure Gradle properties
        echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m" > gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        
        # Initialize Gradle wrapper
        ./gradlew wrapper --gradle-version 8.9 --distribution-type all
        
    - name: Build APK (with diagnostics)
      run: |
        cd love-template
        chmod +x gradlew
        
        # Clean build environment
        ./gradlew clean
        
        # Build with full diagnostics
        if ! ./gradlew assembleDebug \
            --stacktrace \
            --info \
            --no-daemon \
            -Dorg.gradle.parallel=false \
            -Dorg.gradle.dependency.verification=lenient; then
            
            echo "::error::Build failed, gathering diagnostics..."
            echo "=== Build directory structure ==="
            find . -type d | sort
            
            echo "=== Gradle processes ==="
            ps aux | grep gradle || true
            
            echo "=== Memory usage ==="
            free -h
            
            exit 1
        fi
        
    - name: Package and verify APK
      run: |
        mkdir -p build-output
        
        if [ -f "love-template/app/build/outputs/apk/debug/app-debug.apk" ]; then
          mv love-template/app/build/outputs/apk/debug/app-debug.apk build-output/wormaze-debug.apk
          echo "APK size: $(du -h build-output/wormaze-debug.apk | cut -f1)"
          echo "✅ Build successful"
        else
          echo "::error::APK not found! Searching..."
          find love-template/app/build -name "*.apk" || true
          exit 1
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wormaze-apk
        path: build-output/wormaze-debug.apk
        retention-days: 30
